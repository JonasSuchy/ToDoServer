openapi: "3.0.2"
info:
  title: ToDo
  version: "1.0"
servers:
  - url: https://api.server.test/v1
paths:
  /todo-list/{list_id}:
    get:
      description: Liefert alle Einträge einer Todo-Liste zurück.
      parameters:
        - in: path
          name: list_id
          schema:
            type: string
            format: uuid
          required: true
          description: in of the list to get
      responses:
        '200':
          description: A list of entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/todolist'
    delete:
      description: Löscht eine komplette Todo-Liste mit allen Einträgen.
      parameters:
        - in: path
          name: list_id
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the list to delete.
      responses:
        '200':
          description: List was successfully deleted.
        '404':
          description: List was not found.

  /todo-list/:
    post:
      description: Fügt eine neue Todo-Liste hinzu.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/todolist'
        required: true
      responses:
        '200':
          description: The created ToDo-List.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/todolist'

  /todo-list/{list_id}/entry/:
    post:
      description: Fügt einen Eintrag zu einer bestehenden Todo-Liste hinzu.
      parameters:
        - in: path
          name: list_id
          schema:
            type: string
            format: uuid
          description: Id of list
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entry'
        required: true
      responses:
        '200':
          description: The created entry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entry'

  /todo-list/{list_id}/entry/{entry_id}:
    put:
      description: Aktualisiert einen bestehenden Eintrag.
      parameters:
        - in: path
          name: list_id
          schema:
            type: string
            format: uuid
          description: Id of list
          required: true
        - in: path
          name: entry_id
          schema:
            type: string
            format: uuid
          description: Id of entry
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entry'
        required: true
      responses:
        '200':
          description: The edited entry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entry'
    delete:
      description: Löscht einen einzelnen Eintrag einer Todo-Liste.
      parameters:
        - in: path
          name: list_id
          schema:
            type: string
            format: uuid
          description: Id of list
          required: true
        - in: path
          name: entry_id
          schema:
            type: string
            format: uuid
          description:  Id of entry
          required: true
      responses:
        '200':
          description: Entry was successfully deleted.
        '404':
          description: Entry was not found.

  /user:
    get:
      description: Liefert alle User zurück.
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    post:
      description: Fügt einen neuen Benutzer hinzu.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        '200':
          description: The created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

  /user/{user_id}:
    delete:
      description: Löscht einen einzelnen User.
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
            format: uuid
          description: Id of user
          required: true
      responses:
        '200':
          description: User was successfully deleted.
        '404':
          description: User was not found.


components:
  schemas:
    todolist:
      type: object
      required:
        - id
        - name
        - user-id
      description: ToDo-List
      properties:
        name:
          type: string
        id:
          type: string
          format: uuid
        user-id:
          type: string
          format: uuid
        entries:
          type: array
          items:
            $ref: '#/components/schemas/entry'
        description:
          type: string

    entry:
      type: object
      required:
        - id
        - name
        - list-id
      description: ToDo-Entry
      properties:
        name:
          type: string
        id:
          type: string
          format: uuid
        description:
          type: string
        user-id:
          type: string
          format: uuid

    user:
      type: object
      required:
        - id
        - name
      description: User
      properties:
        name:
          type: string
        id:
          type: string
          format: uuid